<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Articles</title>
	<subtitle>Demo posts page for zola-theme-serene</subtitle>
	<link href="https://samuel-duffield1.github.io/posts/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://samuel-duffield1.github.io/posts/"/>
	<updated>2025-09-04T00:00:00+00:00</updated>
	<id>https://samuel-duffield1.github.io/posts/feed.xml</id>
	<entry xml:lang="en">
		<title>Open Source BVLOS Mesh Comms for Drones &amp; Adding Board Support for the Challenger RP2040 LoRa to Meshtastic</title>
		<published>2025-09-04T00:00:00+00:00</published>
		<updated>2025-09-04T00:00:00+00:00</updated>
		<link href="https://samuel-duffield1.github.io/posts/meshtastic-challenger-rp2040/" type="text/html"/>
		<id>https://samuel-duffield1.github.io/posts/meshtastic-challenger-rp2040/</id>
		<content type="html">&lt;p&gt;Author: Sam Duffield&lt;&#x2F;p&gt;
&lt;h2 id=&quot;context&quot;&gt;Context&lt;a class=&quot;zola-anchor&quot; href=&quot;#context&quot; aria-label=&quot;Anchor link for: context&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve recently had many friends &amp;amp; colleagues raving about &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;meshtastic.org&#x2F;&quot;&gt;Meshtastic&lt;&#x2F;a&gt;, an Open Source Mesh-Radio Communications System that uses the 433Mhz &amp;amp; 868Mhz PHY ISM bands to exchange data. The great thing about &lt;strong&gt;ISM (Industrial, Scientific, and Medical) bands&lt;&#x2F;strong&gt; is that they are internationally reserved for these purposes, meaning you can use them without needing an expensive license.&lt;&#x2F;p&gt;
&lt;p&gt;Combine this with a side project I&#x27;ve been working on (Beyond Visual Line of Sight (BVLOS) Control of a Robot for under £100)... I thought there&#x27;s a perfect combination of technology to experiment with. For those unfamiliar, &lt;strong&gt;BVLOS&lt;&#x2F;strong&gt; simply means operating the drone or robot beyond your ability to see it with your own eyes, a crucial capability for any serious long-range application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intro-to-meshtastic&quot;&gt;Intro to Meshtastic&lt;a class=&quot;zola-anchor&quot; href=&quot;#intro-to-meshtastic&quot; aria-label=&quot;Anchor link for: intro-to-meshtastic&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;If you were manufacturing a Drone for a defence company, you would have to budget at least £5,000 for a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.dtccodan.com&#x2F;products&#x2F;sdr-h2-2&quot;&gt;MANET Meshnet Radio&lt;&#x2F;a&gt;. &lt;strong&gt;MANET, or Mobile Ad Hoc Network&lt;&#x2F;strong&gt;, refers to a self-healing, decentralized network where each node can relay data. This is essential for military and emergency services where there&#x27;s no reliable infrastructure. Project costs &amp;amp; procurement challenges would quickly spiral into the £100,000&#x27;s before you even start the design &amp;amp; build of your robot.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;meshtastic.org&#x2F;&quot;&gt;Meshtastic&lt;&#x2F;a&gt; is an open source, off-grid, decentralized, mesh network built to run on affordable, low-power devices. The 1 kit for one radio costs ~£25. Individual components for a PCB could go as low as £3 (for mass procurement purchase).&lt;&#x2F;p&gt;
&lt;p&gt;There exists pre-assembled Meshtastic kits you can buy from Amazon... such as the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;meshtastic.org&#x2F;docs&#x2F;hardware&#x2F;devices&#x2F;heltec-automation&#x2F;lora32&#x2F;&quot;&gt;Heltec LoRa 32 V3&lt;&#x2F;a&gt;, but I didn&#x27;t want the overhead power consumption of a pre-soldered LCD screen... nor did I want&#x2F;need BLE Connectivity for smartphone pairing either.&lt;&#x2F;p&gt;
&lt;p&gt;My project will eventually be boiled down to a Single 2-layer PCB... so the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;thepihut.com&#x2F;products&#x2F;challenger-rp2040-lora-868mhz&quot;&gt;Challenger RP2040 868MHz LoRa&lt;&#x2F;a&gt; seemed like the perfect dev kit board, especially as its &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;invectorlabs&#x2F;hw&#x2F;challenger_rp2040_lora&quot;&gt;schematics are open source&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;meshtastic-challenger-rp2040&#x2F;.&#x2F;imgs&#x2F;IMG_2275.jpeg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The intent will be to connect the radio over UART to my robotics controller, to seperate concerns (keep signal processing of radio comms isolated from robotic control algorithms) and simplify the design.&lt;&#x2F;p&gt;
&lt;p&gt;Using a combination of Meshtastic, &lt;strong&gt;MAVLINK (Micro Air Vehicle Link)&lt;&#x2F;strong&gt;, a lightweight messaging protocol for drones, and &lt;strong&gt;MQTT (Message Queuing Telemetry Transport)&lt;&#x2F;strong&gt;, a simple and effective protocol for IoT devices, I should be able to operate my Robot anywhere in the world, as long as it maintains connection with &lt;strong&gt;any publically available remote field gateway&lt;&#x2F;strong&gt;.
Services such as &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;search?q=%5Bhttps:&#x2F;&#x2F;meshtastic.org&#x2F;docs&#x2F;software&#x2F;linux&#x2F;installation&#x2F;%5D(https:&#x2F;&#x2F;meshtastic.org&#x2F;docs&#x2F;software&#x2F;linux&#x2F;installation&#x2F;)&quot;&gt;&lt;code&gt;meshtasticd&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; can be configured to forward on encrypted meshtastic messages onto a public MQTT broker. This could be any remote Meshtastic Node that someone has deployed, not just me. Deploying a node running from solar cells can be achieved for under £100.&lt;&#x2F;p&gt;
&lt;p&gt;A system block diagram of how this could be achieved is below. Better yet, Meshtastic integrates support for &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;meshtastic.org&#x2F;docs&#x2F;software&#x2F;integrations&#x2F;integrations-atak-plugin&#x2F;&quot;&gt;ATAK&lt;&#x2F;a&gt; right out of the box. &lt;strong&gt;ATAK (Android Team Awareness Kit)&lt;&#x2F;strong&gt; is a powerful geospatial mapping and situational awareness tool used by military and first responders, so having this integration available for a hobbyist project is incredible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;meshtastic-challenger-rp2040&#x2F;.&#x2F;imgs&#x2F;block-diagram.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-board-support-to-meshtastic&quot;&gt;Adding Board Support to Meshtastic&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-board-support-to-meshtastic&quot; aria-label=&quot;Anchor link for: adding-board-support-to-meshtastic&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;There was just one problem though with the Challenge RP2040 LoRa though... it wasn&#x27;t yet supported by Meshtastic... so a perfect opportunity to contribute to the firmware with a board support package (BSP).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;meshtastic-challenger-rp2040&#x2F;.&#x2F;imgs&#x2F;schematic-page-1.png&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;meshtastic-challenger-rp2040&#x2F;.&#x2F;imgs&#x2F;schematic-page-2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Schematics are &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;invectorlabs&#x2F;hw&#x2F;challenger_rp2040_lora&quot;&gt;provided for the board&lt;&#x2F;a&gt;. Instructions on how to add board support packages is well detailed on the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;meshtastic.org&#x2F;docs&#x2F;development&#x2F;firmware&#x2F;build&#x2F;&quot;&gt;meshtastic documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s an easy way to obtain a pre-written pinout for community&#x2F;hobbyist dev kits, and that&#x27;s to check whether there&#x27;s an &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;store.arduino.cc&#x2F;collections&#x2F;core-family&quot;&gt;Arduino Core&lt;&#x2F;a&gt; written for the device. An &lt;strong&gt;Arduino Core&lt;&#x2F;strong&gt; is essentially the software package that translates the standard Arduino functions (like &lt;code&gt;digitalWrite()&lt;&#x2F;code&gt; and &lt;code&gt;analogRead()&lt;&#x2F;code&gt;) into instructions that a specific microcontroller, in this case the RP2040, can understand.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve worked with supporting RP2040 devices on the Arduino Framework before, and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;earlephilhower&#x2F;arduino-pico&#x2F;blob&#x2F;master&#x2F;variants&#x2F;challenger_2040_lora&#x2F;pins_arduino.h&quot;&gt;Earle Philhower has long been the maintainer of the arduino-pico core on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This meant it was a fairly trivial exercise to add a &lt;code&gt;variant.h&lt;&#x2F;code&gt; file with the correct pinout to enable the board within the firmware (&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;meshtastic&#x2F;firmware&#x2F;pull&#x2F;7826&#x2F;files&quot;&gt;see Pull Request&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;And that&#x27;s it! You can build the firmware &amp;amp; flash it to your own Challenger RP2040 if you so wish by following the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;meshtastic.org&#x2F;docs&#x2F;development&#x2F;firmware&#x2F;build&#x2F;&quot;&gt;build instructions&lt;&#x2F;a&gt; on your development machine.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a testament to the power of open source that you can take an unsupported board and, with a little digging, get it running with a complex and powerful firmware like Meshtastic. Happy meshing!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Accessing Docker Containers on Edge Compute Devices using Balena</title>
		<published>2025-07-16T00:00:00+00:00</published>
		<updated>2025-07-16T00:00:00+00:00</updated>
		<link href="https://samuel-duffield1.github.io/posts/remote-dev-balena/" type="text/html"/>
		<id>https://samuel-duffield1.github.io/posts/remote-dev-balena/</id>
		<content type="html">&lt;p&gt;Author: Sam Duffield&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve written an exmaple of how to setup an &lt;code&gt;openssh-server&lt;&#x2F;code&gt; on a &lt;code&gt;ubuntu:22.04&lt;&#x2F;code&gt; container on my personal github profile &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samuel-duffield1&#x2F;vscode-remote-dev-balena&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As noted in the &lt;code&gt;README.md&lt;&#x2F;code&gt;, I&#x27;ve found this useful for writing temporary&#x2F;experimental hardware interface code to test drivers &amp;amp; hardware that would otherwise be unavailable to test on a desktop machine. This reduces the &lt;code&gt;Build-&amp;gt;Test-&amp;gt;Modify&lt;&#x2F;code&gt; loop that would otherwise be a little bit slower on an edge compute device, even with such things such as &quot;Balena Livepush&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;A couple of things to note in how this solution was designed:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;supervisor&lt;&#x2F;code&gt; was used to ensure concurrency of the &lt;code&gt;openssh-server&lt;&#x2F;code&gt; as a background process for any foreground process that may be running&lt;&#x2F;li&gt;
&lt;li&gt;A seperate port to &lt;code&gt;22&lt;&#x2F;code&gt; was used to avoid conflict with the HostOS container of Balena.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rsync&lt;&#x2F;code&gt; is provided as a way to auto-sync back files from the remote device to the host machine (although for most simple tweaks, I find myself dragging &amp;amp; dropping files between 2 vscode instances on my 2 monitors).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Remotely Piloting Drones with MAVProxy and Balena</title>
		<published>2025-07-11T00:00:00+00:00</published>
		<updated>2025-07-11T00:00:00+00:00</updated>
		<link href="https://samuel-duffield1.github.io/posts/balena-mavproxy/" type="text/html"/>
		<id>https://samuel-duffield1.github.io/posts/balena-mavproxy/</id>
		<content type="html">&lt;p&gt;Author: Sam Duffield&lt;&#x2F;p&gt;
&lt;p&gt;In the world of drones and IoT, the ability to control and monitor your devices from anywhere is a game-changer. Imagine having a drone in a remote location, sending back valuable data, and being able to manage it as if you were right there. This is where the power of MAVProxy and Balena comes in. By combining MAVProxy, a powerful ground control station for drones, with Balena, a platform for managing connected devices, you can create a robust and flexible system for remote drone operations.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samuel-duffield1&#x2F;balena-mavproxy&quot;&gt;example repostiory&lt;&#x2F;a&gt; can be found on my personal github profile.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-is-mavproxy&quot;&gt;What is MAVProxy?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-mavproxy&quot; aria-label=&quot;Anchor link for: what-is-mavproxy&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;MAVProxy is a fully-featured, command-line-based ground control station (GCS) for MAVLink-enabled drones. MAVLink is a lightweight messaging protocol for communicating with drones and their components. MAVProxy allows you to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relay MAVLink messages:&lt;&#x2F;strong&gt; It can act as a bridge between your drone&#x27;s flight controller and other devices on a network.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Run on-board scripts:&lt;&#x2F;strong&gt; You can automate drone behavior with Python scripts that run directly on the GCS.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Forward telemetry data:&lt;&#x2F;strong&gt; Stream data from your drone to multiple other GCS applications or data-logging services.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Extend functionality with modules:&lt;&#x2F;strong&gt; MAVProxy has a modular architecture that allows you to add new features, such as custom maps, antenna trackers, and more.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Its lightweight and versatile nature makes it an ideal candidate for running on embedded systems and companion computers, which are often found on drones.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-is-balena&quot;&gt;What is Balena?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-balena&quot; aria-label=&quot;Anchor link for: what-is-balena&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Balena is a complete IoT platform that simplifies the process of developing, deploying, and managing fleets of connected devices. At its core, Balena provides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A container-based environment:&lt;&#x2F;strong&gt; Your applications run in Docker containers, making them portable, scalable, and easy to manage.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A robust OS:&lt;&#x2F;strong&gt; BalenaOS is a minimal, secure, and reliable operating system designed specifically for running containers on embedded devices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cloud-based management:&lt;&#x2F;strong&gt; The BalenaCloud dashboard gives you a centralized view of all your devices, allowing you to monitor their health, push updates, and manage their software from anywhere in the world.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Powerful networking:&lt;&#x2F;strong&gt; Balena provides a public URL for each device, allowing you to access them remotely, even if they are behind a firewall or on a cellular network.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;putting-them-together-mavproxy-on-balena&quot;&gt;Putting Them Together: MAVProxy on Balena&lt;a class=&quot;zola-anchor&quot; href=&quot;#putting-them-together-mavproxy-on-balena&quot; aria-label=&quot;Anchor link for: putting-them-together-mavproxy-on-balena&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;By deploying MAVProxy as a container on a Balena-managed device, you can create a powerful and flexible remote GCS. Here’s how it would work:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Hardware:&lt;&#x2F;strong&gt; A companion computer, like a Raspberry Pi, is connected to your drone&#x27;s flight controller. This device runs BalenaOS.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Software:&lt;&#x2F;strong&gt; You create a Docker container that includes MAVProxy and any other tools or scripts you need. This container is then pushed to the BalenaCloud and deployed to your device.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Connection:&lt;&#x2F;strong&gt; MAVProxy, running in its container on the device, communicates with the flight controller via a serial or network connection. It then forwards the MAVLink data to the internet via the BalenaCloud&#x27;s VPN.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Remote Access:&lt;&#x2F;strong&gt; From your computer, you can connect to the MAVProxy instance running on the drone&#x27;s companion computer through the BalenaCloud public URL. This gives you full control over the drone and access to its telemetry data, as if it were connected directly to your machine.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;data-flow&quot;&gt;Data-Flow&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-flow&quot; aria-label=&quot;Anchor link for: data-flow&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;balena-mavproxy&#x2F;imgs&#x2F;high-level-architecture.svg&quot; alt=&quot;high-level-architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;block-diagram&quot;&gt;Block Diagram&lt;a class=&quot;zola-anchor&quot; href=&quot;#block-diagram&quot; aria-label=&quot;Anchor link for: block-diagram&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;balena-mavproxy&#x2F;imgs&#x2F;block-diagram.svg&quot; alt=&quot;block-diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;suggestions-for-expansion&quot;&gt;Suggestions for Expansion&lt;a class=&quot;zola-anchor&quot; href=&quot;#suggestions-for-expansion&quot; aria-label=&quot;Anchor link for: suggestions-for-expansion&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This is just the beginning. Here are a few ways this project could be expanded:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-drone management:&lt;&#x2F;strong&gt; Use Balena&#x27;s fleet management capabilities to control and monitor multiple drones at once.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;AI and Machine Learning:&lt;&#x2F;strong&gt; Add another container to your Balena device to run AI and machine learning models for tasks like object detection or autonomous navigation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Custom Web Interface:&lt;&#x2F;strong&gt; Create a web-based dashboard, running in its own container on the device, to provide a user-friendly interface for monitoring and controlling the drone.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;4G&#x2F;5G Connectivity:&lt;&#x2F;strong&gt; Add a cellular modem to your companion computer for truly long-range and remote operations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Data Logging and Analysis:&lt;&#x2F;strong&gt; Stream telemetry data from MAVProxy to a cloud-based database or analytics platform for post-flight analysis.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The combination of MAVProxy and Balena offers a powerful and flexible solution for remote drone operations. By leveraging the container-based approach and cloud management capabilities of Balena, you can create a GCS that is not only robust and scalable but also easy to manage and update. Whether you&#x27;re a hobbyist, a researcher, or a commercial drone operator, this setup has the potential to unlock a new world of possibilities for your drone projects. 🚁&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>EdgeAI Machine Vision on Deployed Robotics Projects</title>
		<published>2025-07-02T00:00:00+00:00</published>
		<updated>2025-07-02T00:00:00+00:00</updated>
		<link href="https://samuel-duffield1.github.io/posts/machine-vision/" type="text/html"/>
		<id>https://samuel-duffield1.github.io/posts/machine-vision/</id>
		<content type="html">&lt;p&gt;Author: Sam Duffield&lt;&#x2F;p&gt;
&lt;p&gt;Bringing machine learning to your edge computer vision projects is more accessible than ever. For any modern robot or smart device, the ability to observe, detect, and act on its surroundings is becoming a critical feature.&lt;&#x2F;p&gt;
&lt;p&gt;These are my personal notes on how to quickly bootstrap an object detection application in  Robotics projects.  This guide deliberately &lt;strong&gt;does not share project-complete source code&lt;&#x2F;strong&gt;, rather code-snippets to aid your thinking &amp;amp; shape your own solution. In my experience, it is rarely lack of source code that slows a project down, but rather dependancy-conflicts &amp;amp;&#x2F;or poor implementation architectures. This guide will hopefully nudge you in the right direction.&lt;&#x2F;p&gt;
&lt;p&gt;This guide shares the core-components to combine the power of OpenCV and an Ultralytics YOLOv8 model. Additionally, with &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.balena.io&#x2F;&quot;&gt;Balena&lt;&#x2F;a&gt;, you can deploy &amp;amp; manage a robust and scalable solution across a fleet of devices, making it ideal for hobbyists and professionals alike. Why containers? You&#x27;ll find many arguments for the use of containers for software deployment (&amp;amp; development) out there on the web. For robotics projects &amp;amp; Edge AI, they provide a great way to isolate your dependancies in a network-secure environment in a packaged artefact that you can ship between devices &amp;amp; targets with ease.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity &amp;amp; rapid iteration&#x2F;development, this guide uses Python 3.11. Python is a great language for iteration of unrefined ideas to build concept demonstrators for VC&#x27;s and investors, and leverages several accelerated libraries &amp;amp; runtimes written in C and Rust under the hood.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-bom&quot;&gt;Software BoM&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-bom&quot; aria-label=&quot;Anchor link for: software-bom&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Balena:&lt;&#x2F;strong&gt; An all-in-one platform for managing your fleet of connected devices. &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.balena.io&#x2F;os&quot;&gt;BalenaOS&lt;&#x2F;a&gt;, a minimal Linux distribution, is optimized for running Docker containers. BalenaCloud allows you to build, deploy, and manage your applications remotely. This means you can update your device&#x27;s software with a simple &lt;code&gt;balena push&lt;&#x2F;code&gt;. Read the Getting Started guide &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.balena.io&#x2F;learn&#x2F;getting-started&#x2F;raspberrypi5&#x2F;python&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OpenCV:&lt;&#x2F;strong&gt; The Swiss Army knife of computer vision. This open-source library provides a vast array of tools for image and video analysis. We&#x27;ll use it to capture video from a camera and preprocess it for our object detection model.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ultralytics (YOLOv8):&lt;&#x2F;strong&gt; Ultralytics provides highly efficient and accurate object detection models. YOLOv8 is a robust iteration, offering state-of-the-art performance, making it perfect for resource-constrained edge devices.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-you-ll-need&quot;&gt;What You&#x27;ll Need&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-you-ll-need&quot; aria-label=&quot;Anchor link for: what-you-ll-need&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;To bring up a fleet-managed robotics project complete with machine vision, you&#x27;ll need the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A supported embedded Linux device:&lt;&#x2F;strong&gt; A Raspberry Pi 5 is an excellent choice for its recent CPU performance enhancements, and the ability to integrate hardware accelerators such as the Hailo-8 (future guides!).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A compatible camera:&lt;&#x2F;strong&gt; A USB webcam or the Raspberry Pi Camera Module will work perfectly.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A free BalenaCloud account:&lt;&#x2F;strong&gt; Sign up at &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.balena.io&#x2F;&quot;&gt;balena.io&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Balena CLI tool:&lt;&#x2F;strong&gt; Installation instructions can be found in the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.balena.io&#x2F;docs&#x2F;reference&#x2F;cli&#x2F;&quot;&gt;Balena documentation&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A local development environment with Git and Docker installed.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;solution-architecture&quot;&gt;Solution Architecture&lt;a class=&quot;zola-anchor&quot; href=&quot;#solution-architecture&quot; aria-label=&quot;Anchor link for: solution-architecture&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Many edge-deployed machine vision projects, especially robotics projects, will have a camera connected, but not a screen. Hence, &lt;code&gt;flask&lt;&#x2F;code&gt; is recommended to build a small web-server to serve images to network devices on the same local network. Additional security options could be provided, such as encrypted images or authentication, but these are beyond the scope of this article.&lt;&#x2F;p&gt;
&lt;p&gt;For sharing classification output with your robotics application, FastDDS (or other DDS implementations) is recommended to interface with the ROS2 environment your robotics control application is running in. A full robotics control application is beyond the scope of this article, but may be covered in a future guide.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;machine-vision&#x2F;imgs&#x2F;block-diagram.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-dependancies&quot;&gt;Code Dependancies&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-dependancies&quot; aria-label=&quot;Anchor link for: code-dependancies&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Your Python project will require the following dependancies.
If you work in a commercially sensitive environment it&#x27;s a great idea to vendor these dependancies locally, or self-host a package manager:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;opencv-python == &amp;quot;4.9.0.80&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tensorflow == &amp;quot;2.16.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tensorflow-hub == &amp;quot;0.16.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ultralytics == &amp;quot;8.2.75&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;flask == &amp;quot;3.0.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;pillow == &amp;quot;10.4.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-camera-opencv-via-libcamera&quot;&gt;The Camera (OpenCV via &lt;code&gt;libcamera&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-camera-opencv-via-libcamera&quot; aria-label=&quot;Anchor link for: the-camera-opencv-via-libcamera&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;There are &lt;em&gt;hundreds&lt;&#x2F;em&gt; of tutorials on how to use OpenCV in Python with a camera connected to a linux device. I recommend the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;sd25t4HmFdU&quot;&gt;Control your Webcam with Python - OpenCV Beginners Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;rICplpK28SI&quot;&gt;Capture Video from Camera using Python OpenCV&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;5ZrtPi-7EN0&quot;&gt;How to Capture an Image From a Webcam Using Python OpenCV&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, what I would advise is reading the documentation on how the image should be Transformed to align with the dimensions the the model tensors are expecting.&lt;&#x2F;p&gt;
&lt;p&gt;Such a transformation in code may look as follows (to 640 x 480 pixel format):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Decode JPEG frame data to OpenCV image format
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;numpy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;array&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;original_image&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;img&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;cv2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;imdecode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;cv2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;IMREAD_COLOR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Resize image to standard input size for YOLOv8 model
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;img&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;cv2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;resize&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;img&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-tuple z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;640&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;480&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;interpolation&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;cv2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;INTER_LINEAR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Perform inference with streaming results for memory efficiency
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;results&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;model&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;img&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;True&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;False&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;result&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;results&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;	&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Process COCO results...
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-model-yolo&quot;&gt;The Model (Yolo)&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-model-yolo&quot; aria-label=&quot;Anchor link for: the-model-yolo&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;You can download the &lt;code&gt;yolov8n.pt&lt;&#x2F;code&gt; model offline &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.ultralytics.com&#x2F;models&#x2F;yolov8&#x2F;#performance-metrics&quot;&gt;here&lt;&#x2F;a&gt;. I recommend the &lt;code&gt;v8n&lt;&#x2F;code&gt; model for Edge Compute devices, due to its reduced &lt;code&gt;FLOP&lt;&#x2F;code&gt; (Floating Point Operations) &amp;amp; consequently reduced CPU speed on compute-restrained devices typically found on Embedded Linux devices.&lt;&#x2F;p&gt;
&lt;p&gt;I  would advice you structure your application to such that you contain the model within a data structure, with member-methods to perform appropriate operations (such as &lt;code&gt;def perform_classification(self, image :Image) -&amp;gt; output&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;ultralytics&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt; &lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;YOLO&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Directory path to external model file
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;EXTERN_FILES_DIR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;os&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;join&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;os&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;os&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;realpath&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-variable z-magic z-python&quot;&gt;__file__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;assets&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;Ultralytics&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-class z-python&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-class z-python&quot;&gt;class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-class z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;UltralyticsYolov8n&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-class z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;    &lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-python&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;    YOLOv8 Nano object detection model implementation using Ultralytics.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;    This class provides a wrapper around the Ultralytics YOLOv8 nano model
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;    for real-time object detection. 
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;    &lt;span class=&quot;z-punctuation z-definition z-comment z-end z-python&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-annotation z-return z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-return z-python&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-python&quot;&gt;None&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-python&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;        Initialize the YOLOv8 nano model.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;        Loads the pre-trained YOLOv8 nano model from the assets directory
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;        and sets up the model configuration for inference.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;        Raises:
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;            FileNotFoundError: If the yolov8n.pt model file cannot be found
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;            RuntimeError: If the model fails to initialize
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;        &lt;span class=&quot;z-punctuation z-definition z-comment z-end z-python&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Load the YOLOv8 nano model with verbose output disabled
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;model&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;YOLO&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;os&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;join&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;EXTERN_FILES_DIR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;yolov8n.pt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;False&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;model_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;Ultralytics YoloV8n&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;perform_classification&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameters z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;image&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-annotation z-return z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-return z-python&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Output&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;	    &lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-python&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;	    Your Code here!
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-block z-documentation z-python&quot;&gt;	    &lt;span class=&quot;z-punctuation z-definition z-comment z-end z-python&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-display-flask-webserver&quot;&gt;The Display (Flask WebServer)&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-display-flask-webserver&quot; aria-label=&quot;Anchor link for: the-display-flask-webserver&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Displaying your image using a webserver &lt;strong&gt;should be done concurrently&lt;&#x2F;strong&gt; to not slow the inference-loop of your model. A rough idea of how this can be achieved is shown below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;machine-vision&#x2F;imgs&#x2F;mermaid-chart.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1. Capture Frame:&lt;&#x2F;strong&gt; The dedicated &lt;strong&gt;Object Detection&lt;&#x2F;strong&gt; thread requests a new image from the &lt;strong&gt;Camera&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;2. Raw Frame:&lt;&#x2F;strong&gt; The &lt;strong&gt;Camera&lt;&#x2F;strong&gt; provides a single, raw image frame back to the &lt;strong&gt;Object Detection&lt;&#x2F;strong&gt; thread.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;3. Run YOLOv8 Inference:&lt;&#x2F;strong&gt; The &lt;strong&gt;Object Detection&lt;&#x2F;strong&gt; thread processes the frame internally. It uses the Ultralytics model to find objects and then draws visualization boxes and labels directly onto the image.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;4. Update latest frame:&lt;&#x2F;strong&gt; The &lt;strong&gt;Object Detection&lt;&#x2F;strong&gt; thread places the newly processed (annotated) frame into a shared variable that the &lt;strong&gt;Web Server&lt;&#x2F;strong&gt; can access. This update is thread-safe to prevent conflicts.
&lt;ul&gt;
&lt;li&gt;You may want to implement a circular buffer in your own &lt;code&gt;WebServer&lt;&#x2F;code&gt; implementation to prevent slowing bottlenecks imposed by the Browser&#x27;s web connection.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;5. GET &#x2F;video_feed:&lt;&#x2F;strong&gt; A user opens your device&#x27;s IP address in their &lt;strong&gt;Browser&lt;&#x2F;strong&gt;, which sends a request to the &lt;strong&gt;Web Server&lt;&#x2F;strong&gt; to start streaming the video feed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;6. Read latest frame:&lt;&#x2F;strong&gt; The &lt;strong&gt;Web Server&lt;&#x2F;strong&gt; thread continuously reads the most recent annotated frame from the shared variable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;7. Stream JPEG Frame:&lt;&#x2F;strong&gt; The &lt;strong&gt;Web Server&lt;&#x2F;strong&gt; sends the image frame to the &lt;strong&gt;Browser&lt;&#x2F;strong&gt;. This action repeats in a loop (steps 6 and 7), creating a live video stream for the user.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dockerfile-and-compose&quot;&gt;Dockerfile and Compose&lt;a class=&quot;zola-anchor&quot; href=&quot;#dockerfile-and-compose&quot; aria-label=&quot;Anchor link for: dockerfile-and-compose&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For Python-based OpenCV project, dependancies managed by the &lt;code&gt;apt&lt;&#x2F;code&gt; package-manager are minimised. This is because the &lt;code&gt;opencv-python&lt;&#x2F;code&gt; pypi package includes many of the pre-compiled runtime &lt;code&gt;.so&lt;&#x2F;code&gt; libraries that OpenCV depends on.&lt;&#x2F;p&gt;
&lt;p&gt;Dockerfile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; class=&quot;language-dockerfile z-code&quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;FROM&lt;&#x2F;span&gt; python:&lt;span class=&quot;z-entity z-name z-enum z-tag-digest&quot;&gt;3.11&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&#x2F;app
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;COPY&lt;&#x2F;span&gt; . .
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-comment z-dockerfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-dockerfile&quot;&gt;#&lt;&#x2F;span&gt; Install system dependencies
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;RUN &lt;&#x2F;span&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;    build-essential \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;    libgl1-mesa-glx \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;    libglib2.0-0 \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;    git
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;RUN &lt;&#x2F;span&gt;python -m venv venv
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;RUN &lt;&#x2F;span&gt;git init
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-control z-dockerfile&quot;&gt;RUN &lt;&#x2F;span&gt;venv&#x2F;bin&#x2F;pip install .
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-comment z-dockerfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-dockerfile&quot;&gt;#&lt;&#x2F;span&gt; CMD Variable for your application
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-dockerfile&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-dockerfile&quot;&gt;CMD &lt;&#x2F;span&gt;[&lt;span class=&quot;z-string z-quoted z-double z-dockerfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-dockerfile&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;app&#x2F;venv&#x2F;bin&#x2F;python&lt;span class=&quot;z-punctuation z-definition z-string z-end z-dockerfile&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-string z-quoted z-double z-dockerfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-dockerfile&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;app&#x2F;your-application-here.py&lt;span class=&quot;z-punctuation z-definition z-string z-end z-dockerfile&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;docker-compose.yml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;version&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;services&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;app&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;build&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;context&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-float z-decimal z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-decimal z-yaml&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;dockerfile&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;containers&#x2F;Dockerfile&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;8787:8787&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;devices&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;	    &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;dev&#x2F;video0:&#x2F;dev&#x2F;video0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt; Map the camera device into the container
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;result&quot;&gt;Result&lt;a class=&quot;zola-anchor&quot; href=&quot;#result&quot; aria-label=&quot;Anchor link for: result&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;By combining a YoloV8 model, a camera and a display in a containerised environment as described above, you too should be able to bootstrap your robotics project with machine vision!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;samuel-duffield1.github.io&#x2F;posts&#x2F;machine-vision&#x2F;imgs&#x2F;result.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>